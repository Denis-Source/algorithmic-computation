/*
    Скрипт, демонстрирующий поиск элемента в массиве
    с помощью простого перебора всех элементов
*/

// Импорт библиотек
// Для printf()
#include <stdio.h>
// Для rand()
#include <cstdlib>
// Для sort()
#include <algorithm>

using namespace std;

/*
    Функция наполнения массива псевдослучайными значениями
    После наполнения происходит его сортировка

    Для работы требует массив, а также значение его длинны
    Функция ничего не возвращает, а всего лишь работает
    с указанным массивом
*/
void genSortedValues(int array[], int len) {
    // Для генерации псевдослучайных чисел
    // необходимо значения зерна
    // используется для инициализации генератора случ. чисел
    int seed = 0;

    // Установка значения в генераторе
    srand(seed);

    // Генерация случ. числа с последующим его  присваиванием  
    // на каждый элемент массива
    for (int i = 0; i < len; i++) {
        array[i] = rand();
    }
    // Сортировка массива осущ. встроенной функцией модуля algorithm
    // функция sort() в худшем случае имеет сложность N log N
    sort(array, array + len);
}


/*
    Функция нахождения элемента в массиве с помощью бинарного поиска

    Функция принимает аргументы:
        - отсортированный массив целых чисел
        - индекс наименьшего целого числа (0)
        - индекс наибольшего целого числа (длина массива - 1)
        - искомое целое число
    Функция возвращает целое число – индекс массива

    Сложность алгоритма O = log N

    При наличии одинаковых элементов находится первый попавшийся 
    (не первый в списке)
    При отсутствии – возвращает ложное значение -1

    Также использует переменную счетчика для отображения
    количества операций
*/
int findValueBinary(int array[], int first, int last, int number) {
    // Инициализация счетчика

    int counter = 0;

    // Установка возвращаемого значения на ложное значение
    // в случае если не найдется нужный элемент – он и возвращается
    int index = -1;

    // Инкремент счетчика производится при каждой операции
    counter++;

    // Цикл while нужен так как заранее не возможно предугадать количество 
    // итераций

    // Остановкой цикла является случай, переменная, что хранит большее число
    // не выполняет свою задачу (она начинает хранить меньшее)
    while (first <= last) {
        counter += 3;

        // Находим индекс условной середины
        // Нужно учитывать, что переменная – целочисленный тип
        // И значение округлится в сторону меньшего числа (floor)

        // Индекс середины вычисляется используя так называемое
        // "среднее" значение
        int middle = first + (last - first) / 2;
 
        // Если нужный элемент находится посередине
        // Нам "повезло", запоминаем индекс, выходим из цикла
        if (array[middle] == number)
        {
            counter++;
            index = middle;
            break;
        }
        
        // Если элемент, что находится посередине меньше, чем искомое,
        // сдвигаем индекс наименьшего числа на середину, и переходим к след. циклу
        // нужно понимать, что сдвиг идет на значение правее на один от середины
        // саму середину мы уже проверили
        if (array[middle] < number) {
            first = middle + 1;
        }
        
        // Если элемент, что находится посередине больше, сдвигаем индекс
        // наибольшего числа на середину
        // нужно понимать, что сдвиг идет на значение левее на один от середины
        // саму середину мы уже проверили
        else {
            last = middle - 1;
        }
    }
    // Вывод на экран значения счетчика и возврат индекса
    counter++;
    printf("It took %d operations\n", counter);
    return index;
}


int main() {
    // Определение длины массива
    const int arrLen = 100000;
    // Инициализация массива и его наполнение с помощью genSortedValues()
    int arr[arrLen];
    genSortedValues(arr, arrLen);

    // Определение искомого значения
    int numberToFind = 9999;

    // Поиск значения с помощью функции findValueBinary()
    int value = findValueBinary(arr, 0, arrLen - 1, numberToFind);
    // Вывод на экран результата
    printf("Found number %d, at %d position\n", numberToFind, value);
}
