#include <iostream>

using namespace std;

/*
    Функция, которая проверяет является ли
    целое число простым

    Простое – число, которое имеет только два
    делителя (1 и это число)

    Имеет один параметр – целое число, которое проверяется

    Возвращает да или нет (true / false)
*/
bool isPrime(int number) {
    // Не самым эффективным, но простым способом является
    // проверка каждого числа, которое больше 1, но меньше
    // самого этого числа

    // Объявляем цикл, в котором счетчик будет иметь значения
    // от 2 до число -1
    for (int divider = 2; divider < number; divider++) {
        // Проверить делится ли нацело число можно с помощью 
        // деления по модулю, которое возвращает остаток от деления
        // В случае если целое число делится нацело, остаток равен нулю
        if (number % divider == 0) {
            // Если хотя бы одно число делится нацело без остатка,
            // Оно не является простым

            // На этом функция прерывает свое выполнение
            return false;
        }
    }
    // Если мы вышли из цикла – значит число простое
    // так как ни одно число не поделилось нацело без остатка
    return true;
}

int main() {
    // Присваиваем проверочные значения в массиве
	int potentialPrimes[]  = {3, 5, 345, 39, 17, 90};

    // Делаем цикл, для проверки каждого элемента массива
    for (int i = 0; i < size(potentialPrimes); i++) {
        // Делаем условие, внутри которого вызываем функцию проверки
        // Если функция возвращает да (true) – Условие выполняется
        // и наоборот
        // Проверка осуществляется для каждого элемента массива
        // Адресация производиться с помощью счетчика i
        if (isPrime(potentialPrimes[i])) {
            // Если условие выполняется, пишем, что число простое
            printf("Number %d is prime\n", potentialPrimes[i]);
        } else {
            // Иначе – нет
            printf("Number %d is not prime\n", potentialPrimes[i]);
        }
    }
}